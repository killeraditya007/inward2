https://1drv.ms/f/c/26d48f9a8caabd23/EhyVAILJPs9JtfEjbaYcoyQBn6GIj1QvBM6Lrmaasiexmg?e=r7GWdC  -  Eclipse Project


<dependencies>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>5.2.5</version>
    </dependency>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.2.5</version>
    </dependency>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml-schemas</artifactId>
        <version>4.1.2</version>
    </dependency>
    <dependency>
        <groupId>org.apache.xmlbeans</groupId>
        <artifactId>xmlbeans</artifactId>
        <version>5.1.1</version>
    </dependency>
    <dependency>
        <groupId>org.apache.commons</groupId>
        <artifactId>commons-collections4</artifactId>
        <version>4.4</version>
    </dependency>
</dependencies>



public static String getLastAccountName() {
    String lastAccount = null;
    try (FileInputStream fis = new FileInputStream(new File(FILE_PATH));
         Workbook workbook = WorkbookFactory.create(fis)) {

        Sheet sheet = workbook.getSheet(SHEET_NAME);
        int lastRowNum = sheet.getLastRowNum();

        for (int i = lastRowNum; i >= 1; i--) { // start from bottom, skip header
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(0); // assuming account name is in column A
                if (cell != null && cell.getCellType() != CellType.BLANK) {
                    lastAccount = cell.getStringCellValue().trim();
                    break;
                }
            }
        }

    } catch (IOException e) {
        e.printStackTrace();
    }
    return lastAccount;
}




public static String getLastAccountName(String excelPath, String sheetName) {
    String lastAccount = null;
    try (FileInputStream fis = new FileInputStream(new File(excelPath));
         Workbook workbook = WorkbookFactory.create(fis)) {

        Sheet sheet = workbook.getSheet(sheetName);
        int lastRowNum = sheet.getLastRowNum();

        for (int i = lastRowNum; i >= 1; i--) { // skip header row
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(0); // assuming account names are in the 1st column (A)
                if (cell != null && cell.getCellType() != CellType.BLANK) {
                    lastAccount = cell.getStringCellValue();
                    break;
                }
            }
        }

    } catch (IOException e) {
        e.printStackTrace();
    }
    return lastAccount;
}



import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;

public class ExcelUpdater {

    private static final String FILE_PATH = "path/to/your/excel.xlsx";

    // Function 1: Add account if not already present
    public static void addAccount(String accountName) throws IOException {
        FileInputStream fis = new FileInputStream(FILE_PATH);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheetAt(0);

        int accountColIndex = 0; // "Accounts" column is assumed to be A
        boolean exists = false;

        for (int i = 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(accountColIndex);
                if (cell != null && cell.getCellType() == CellType.STRING
                        && cell.getStringCellValue().trim().equals(accountName)) {
                    exists = true;
                    break;
                }
            }
        }

        // If not found, create new row
        if (!exists) {
            Row newRow = sheet.createRow(sheet.getLastRowNum() + 1);
            Cell accountCell = newRow.createCell(accountColIndex);
            accountCell.setCellValue(accountName);
        }

        fis.close();
        FileOutputStream fos = new FileOutputStream(FILE_PATH);
        workbook.write(fos);
        workbook.close();
        fos.close();
    }

    // Function 2: Update column value for an account
    public static void updateColumn(String accountName, String columnName, String value) throws IOException {
        FileInputStream fis = new FileInputStream(FILE_PATH);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheetAt(0);

        int headerRowIndex = 0;
        Row headerRow = sheet.getRow(headerRowIndex);
        int columnIndex = -1;

        // Find column index by name
        for (Cell cell : headerRow) {
            if (cell.getStringCellValue().trim().equalsIgnoreCase(columnName)) {
                columnIndex = cell.getColumnIndex();
                break;
            }
        }

        if (columnIndex == -1) {
            workbook.close();
            fis.close();
            throw new RuntimeException("Column '" + columnName + "' not found in header.");
        }

        int accountColIndex = 0;
        int targetRowIndex = -1;

        for (int i = 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            if (row != null) {
                Cell cell = row.getCell(accountColIndex);
                if (cell != null && cell.getCellType() == CellType.STRING
                        && cell.getStringCellValue().trim().equals(accountName)) {
                    targetRowIndex = i;
                    break;
                }
            }
        }

        // If account not found, create it first
        if (targetRowIndex == -1) {
            targetRowIndex = sheet.getLastRowNum() + 1;
            Row newRow = sheet.createRow(targetRowIndex);
            newRow.createCell(accountColIndex).setCellValue(accountName);
        }

        Row rowToUpdate = sheet.getRow(targetRowIndex);
        if (rowToUpdate == null) rowToUpdate = sheet.createRow(targetRowIndex);

        Cell targetCell = rowToUpdate.getCell(columnIndex);
        if (targetCell == null) targetCell = rowToUpdate.createCell(columnIndex);

        targetCell.setCellValue(value);

        fis.close();
        FileOutputStream fos = new FileOutputStream(FILE_PATH);
        workbook.write(fos);
        workbook.close();
        fos.close();
    }

    // Sample usage
    public static void main(String[] args) throws IOException {
        addAccount("AUTNew123"); // Function 1
        updateColumn("AUTNew123", "Model", "Cargo"); // Function 2
        updateColumn("AUTNew123", "General Info", "Y");
        updateColumn("AUTNew123", "Policy No", "POL99999");
    }
}


Great question — Java's Robot class doesn't handle special characters automatically (like @, #, _, $, -, &) because these often require pressing Shift or AltGr in combination with a key. You need to manually handle each special character by simulating the proper key combinations.


---

public static void typeString(Robot robot, String text) {
    for (char c : text.toCharArray()) {
        switch (c) {
            case '@':
                pressShiftedKey(robot, KeyEvent.VK_2);
                break;
            case '#':
                pressShiftedKey(robot, KeyEvent.VK_3);
                break;
            case '$':
                pressShiftedKey(robot, KeyEvent.VK_4);
                break;
            case '%':
                pressShiftedKey(robot, KeyEvent.VK_5);
                break;
            case '&':
                pressShiftedKey(robot, KeyEvent.VK_7);
                break;
            case '*':
                pressShiftedKey(robot, KeyEvent.VK_8);
                break;
            case '(':
                pressShiftedKey(robot, KeyEvent.VK_9);
                break;
            case ')':
                pressShiftedKey(robot, KeyEvent.VK_0);
                break;
            case '_':
                pressShiftedKey(robot, KeyEvent.VK_MINUS);
                break;
            case '-':
                pressKey(robot, KeyEvent.VK_MINUS);
                break;
            case '=':
                pressKey(robot, KeyEvent.VK_EQUALS);
                break;
            case '+':
                pressShiftedKey(robot, KeyEvent.VK_EQUALS);
                break;
            case '!':
                pressShiftedKey(robot, KeyEvent.VK_1);
                break;
            case ' ':
                pressKey(robot, KeyEvent.VK_SPACE);
                break;
            default:
                typeChar(robot, c);
        }

        robot.delay(100); // Add slight delay between keystrokes
    }
}

public static void pressShiftedKey(Robot robot, int key) {
    robot.keyPress(KeyEvent.VK_SHIFT);
    robot.keyPress(key);
    robot.keyRelease(key);
    robot.keyRelease(KeyEvent.VK_SHIFT);
}

public static void pressKey(Robot robot, int key) {
    robot.keyPress(key);
    robot.keyRelease(key);
}

public static void typeChar(Robot robot, char c) {
    int keyCode = KeyEvent.getExtendedKeyCodeForChar(c);
    if (keyCode == KeyEvent.VK_UNDEFINED) {
        throw new RuntimeException("Cannot type character: " + c);
    }

    boolean isUpper = Character.isUpperCase(c);
    if (isUpper) robot.keyPress(KeyEvent.VK_SHIFT);

    robot.keyPress(keyCode);
    robot.keyRelease(keyCode);

    if (isUpper) robot.keyRelease(KeyEvent.VK_SHIFT);
}


---



---

⚠️ Limitations

This approach assumes a US QWERTY keyboard layout. If your keyboard layout is different (e.g., AZERTY, QWERTZ), some key codes will differ.

Some symbols (e.g., ^, ~) may require more specific handling with AltGr or custom mapping.



---

Would you like a version for non-US keyboards too? Or want to include more symbols like ^, {, }?



..................
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.devtools.DevTools;
import org.openqa.selenium.devtools.v112.network.Network;
import org.openqa.selenium.devtools.v112.network.model.Headers;

import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class BasicAuthHandler {

    public static void main(String[] args) {

        ChromeOptions options = new ChromeOptions();
        options.addArguments("--headless"); // or "--headless=new" for newer versions
        options.addArguments("--window-size=1920,1080");

        ChromeDriver driver = new ChromeDriver(options);

        // Initialize DevTools
        DevTools devTools = driver.getDevTools();
        devTools.createSession();

        // Enable network and set auth headers
        devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));

        String userPass = "yourUsername:yourPassword";
        String encoded = Base64.getEncoder().encodeToString(userPass.getBytes());

        Map<String, Object> headersMap = new HashMap<>();
        headersMap.put("Authorization", "Basic " + encoded);
        Headers headers = new Headers(headersMap);

        devTools.send(Network.setExtraHTTPHeaders(headers));

        // Step 1: Navigate to main page
        driver.get("https://swuiweb01.int.westfieldspecialty.net/LighthousePreProd/GAAPRIEEngine/Report");

        // Step 2: Click the "Report" link (assume locating by link text or partial text)
        driver.findElement(By.linkText("Report")).click();

        // Now, auth header is sent on background requests too — popup won't appear.

        // Optional: wait and validate report opens
        Thread.sleep(3000); // Use WebDriverWait instead in real code

        System.out.println("Report page title: " + driver.getTitle());
        driver.quit();
    }
}
